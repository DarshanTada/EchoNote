package com.example.shared;

import android.content.Context;
import android.content.SharedPreferences;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

/**
 * Utility class for storing and retrieving MOM notes and tags using SharedPreferences.
 * Notes are stored as a JSON array under KEY_NOTES_LIST.
 * Tags are stored as a JSON array under KEY_TAGS_LIST.
 */
public class SharedPrefUtils {

    // Name of the SharedPreferences file
    private static final String PREF_NAME = "mom_notes";

    // Key for storing the list of MOM notes
    private static final String KEY_NOTES_LIST = "mom_notes_list";

    // Key for storing the list of tags
    private static final String KEY_TAGS_LIST = "mom_tags_list";

    // Tag for logging
    private static final String TAG = "SharedPrefUtils";

    /**
     * Save a MOMNoteModel to SharedPreferences.
     * If a note with the same autogeneratedId exists, it will be updated.
     * Otherwise, the note will be added as new.
     *
     * @param context   Context for accessing SharedPreferences
     * @param noteModel The note to save
     */
    public static void saveNote(Context context, MOMNoteModel noteModel) {
        SharedPreferences prefs = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);
        String existingJson = prefs.getString(KEY_NOTES_LIST, "[]");

        try {
            JSONArray notesArray = new JSONArray(existingJson);
            boolean updated = false;

            // Check for an existing note with the same ID
            for (int i = 0; i < notesArray.length(); i++) {
                JSONObject noteObj = notesArray.getJSONObject(i);
                if (noteObj.getString("autogeneratedId").equals(noteModel.getAutogeneratedId())) {
                    // Update existing note fields
                    noteObj.put("title", noteModel.getTitle());
                    noteObj.put("momdetails", noteModel.getMomdetails());
                    noteObj.put("tags", new JSONArray(noteModel.getTags()));
                    noteObj.put("time", noteModel.getTime());
                    updated = true;
                    break;
                }
            }

            // If no existing note found, add new note
            if (!updated) {
                JSONObject noteObj = new JSONObject();
                noteObj.put("autogeneratedId", noteModel.getAutogeneratedId());
                noteObj.put("title", noteModel.getTitle());
                noteObj.put("momdetails", noteModel.getMomdetails());
                noteObj.put("tags", new JSONArray(noteModel.getTags()));
                noteObj.put("time", noteModel.getTime());
                notesArray.put(noteObj);
            }

            // Save updated notes array back to SharedPreferences
            prefs.edit().putString(KEY_NOTES_LIST, notesArray.toString()).apply();

        } catch (Exception e) {
            Log.e(TAG, "Error saving MOMNoteModel", e);
        }
    }

    /**
     * Retrieve all saved MOMNoteModel objects from SharedPreferences.
     *
     * @param context Context for accessing SharedPreferences
     * @return List of MOMNoteModel objects
     */
    public static List<MOMNoteModel> getAllNotes(Context context) {
        List<MOMNoteModel> notes = new ArrayList<>();
        SharedPreferences prefs = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);
        String json = prefs.getString(KEY_NOTES_LIST, "[]");

        try {
            JSONArray arr = new JSONArray(json);
            for (int i = 0; i < arr.length(); i++) {
                JSONObject obj = arr.getJSONObject(i);
                String autogeneratedId = obj.optString("autogeneratedId", "");
                String title = obj.optString("title", "");
                String momdetails = obj.optString("momdetails", "");

                // Convert JSON array of tags to List<String>
                JSONArray tagsArr = obj.optJSONArray("tags");
                List<String> tags = new ArrayList<>();
                if (tagsArr != null) {
                    for (int j = 0; j < tagsArr.length(); j++) {
                        tags.add(tagsArr.optString(j, ""));
                    }
                }

                long time = obj.optLong("time", 0);
                notes.add(new MOMNoteModel(autogeneratedId, title, momdetails, tags, time));
            }
        } catch (Exception e) {
            Log.e(TAG, "Error reading MOMNoteModel from prefs", e);
        }

        return notes;
    }

    /**
     * Save a new tag to SharedPreferences.
     * If the tag already exists, it will not be duplicated.
     *
     * @param context Context for accessing SharedPreferences
     * @param tag     Tag to save
     */
    public static void saveTag(Context context, String tag) {
        SharedPreferences prefs = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);
        List<String> tags = getAllTags(context);

        if (!tags.contains(tag)) {
            tags.add(tag);
            prefs.edit().putString(KEY_TAGS_LIST, new JSONArray(tags).toString()).apply();
        }
    }

    /**
     * Retrieve all saved tags from SharedPreferences.
     *
     * @param context Context for accessing SharedPreferences
     * @return List of tag strings
     */
    public static List<String> getAllTags(Context context) {
        SharedPreferences prefs = context.getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE);
        String json = prefs.getString(KEY_TAGS_LIST, "[]");
        List<String> tags = new ArrayList<>();

        try {
            JSONArray arr = new JSONArray(json);
            for (int i = 0; i < arr.length(); i++) {
                tags.add(arr.optString(i, ""));
            }
        } catch (Exception e) {
            Log.e(TAG, "Error reading tags from prefs", e);
        }

        return tags;
    }
}
